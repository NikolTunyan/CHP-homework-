#include <cctype>
#include <iostream>
#include <unordered_map>

class SimpleSubstitutionCipher {
private:
  // ?????? ???? ??? ?????? ????????
  std::unordered_map<char, char> encryptionKey;

public:
  // ??????????? ??? ????????????? ?????
  SimpleSubstitutionCipher() {
    // ????????????? ???? ?????? ????????
    encryptionKey = {
        {'A', '3'}, {'B', '8'}, {'C', '1'}, {'D', '9'}, {'E', '5'}, {'F', '2'},
        {'G', '7'}, {'H', '4'}, {'I', '0'}, {'J', '6'}, {'K', 'X'}, {'L', 'Y'},
        {'M', 'Z'}, {'N', 'P'}, {'O', 'Q'}, {'P', 'U'}, {'Q', 'V'}, {'R', 'W'},
        {'S', 'R'}, {'T', 'S'}, {'U', 'N'}, {'V', 'M'}, {'W', 'O'}, {'X', 'K'},
        {'Y', 'L'}, {'Z', 'J'}, {'0', 'I'}, {'1', 'H'}, {'2', 'G'}, {'3', 'F'},
        {'4', 'E'}, {'5', 'D'}, {'6', 'C'}, {'7', 'B'}, {'8', 'A'}, {'9', 'X'}};
  }

  // ??????? ??? ?????????? ??????
  std::string encrypt(const std::string &plaintext) const {
    std::string ciphertext = "";
    for (char ch : plaintext) {
      char upperCh = std::toupper(ch);
      // ???? ?????? ???????????? ? ?????, ????????? ?????? ? ?????????
      if (encryptionKey.find(upperCh) != encryptionKey.end()) {
        ciphertext += encryptionKey.at(upperCh);
      } else {
        ciphertext += ch; // ????????? ???????????? ??????? ???????????
      }
    }
    return ciphertext;
  }

  // ??????? ??? ??????????? ??????
  std::string decrypt(const std::string &ciphertext) const {
    std::string plaintext = "";
    for (char ch : ciphertext) {
      char upperCh = std::toupper(ch);
      // ???? ?????? ???????????? ? ?????, ????????? ???????????? ?????? ?
      // ?????????
      if (encryptionKey.find(upperCh) != encryptionKey.end()) {
        plaintext += getKeyByValue(encryptionKey, ch);
      } else {
        plaintext += ch; // ????????? ???????????? ??????? ???????????
      }
    }
    return plaintext;
  }

private:
  // ??????????????? ??????? ??? ????????? ????? ?? ????????
  char getKeyByValue(const std::unordered_map<char, char> &map,
                     char value) const {
    for (const auto &pair : map) {
      if (pair.second == value) {
        return pair.first;
      }
    }
    return value; // ?????????? ???????? ??????, ???? ?? ??????
  }
};

int main() {
  SimpleSubstitutionCipher cipher;

  // ???????? ???? ????????????
  std::string input;
  std::cout << "??????? ?????????? ???? ? ????: ";
  std::getline(std::cin, input);

  // ??????? ? ??????? ?????????
  std::string encryptedText = cipher.encrypt(input);
  std::cout << "???????????: " << encryptedText << std::endl;

  // ?????????????? ? ??????? ?????????
  std::string decryptedText = cipher.decrypt(encryptedText);
  std::cout << "????????????: " << decryptedText << std::endl;

  return 0;
}