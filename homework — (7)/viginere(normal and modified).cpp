#include <iostream>
#include <string>

class VigenereMachine {
public:
    VigenereMachine(const std::string& key);
    std::string encrypt(const std::string& plaintext) const;
    std::string decrypt(const std::string& ciphertext) const;

private:
    std::string m_key;
};

VigenereMachine::VigenereMachine(const std::string& key) : m_key(key) {}

std::string VigenereMachine::encrypt(const std::string& plaintext) const {
    std::string ciphertext;
    size_t keyLength = m_key.length();
    size_t textLength = plaintext.length();

    for (size_t i = 0; i < textLength; ++i) {
        char currentChar = plaintext[i];
        char keyChar = m_key[i % keyLength];
        char encryptedChar;

        if (isalpha(currentChar)) {
            // ????????, ??? ?????? ????? ????????? ? ??? ?? ????????, ??? ? ??????? ??????
            keyChar = isupper(currentChar) ? toupper(keyChar) : tolower(keyChar);

            // ????????? ?????????? ????????
            encryptedChar = 'A' + (currentChar + keyChar - 2 * 'A') % 26;
            ciphertext.push_back(encryptedChar);
        } else {
            // ???????????? ??????? ????????? ??? ?????????
            ciphertext.push_back(currentChar);
        }
    }

    return ciphertext;
}

std::string VigenereMachine::decrypt(const std::string& ciphertext) const {
    std::string decryptedText;
    size_t keyLength = m_key.length();
    size_t textLength = ciphertext.length();

    for (size_t i = 0; i < textLength; ++i) {
        char currentChar = ciphertext[i];
        char keyChar = m_key[i % keyLength];
        char decryptedChar;

        if (isalpha(currentChar)) {
            // ????????, ??? ?????? ????? ????????? ? ??? ?? ????????, ??? ? ??????? ??????
            keyChar = isupper(currentChar) ? toupper(keyChar) : tolower(keyChar);

            // ????????? ??????????? ????????
            decryptedChar = 'A' + (currentChar - keyChar + 26) % 26;
            decryptedText.push_back(decryptedChar);
        } else {
            // ???????????? ??????? ????????? ??? ?????????
            decryptedText.push_back(currentChar);
        }
    }

    return decryptedText;
}

int main() {
    std::string key = "????"; // ???????? ?? ??? ????
    VigenereMachine vigenere(key);

    // ????????? ????? ?? ????????????
    std::string input;
    std::cout << "??????? ?????????? ????: ";
    std::getline(std::cin, input);

    // ?????????? ? ????? ??????????
    std::string encryptedText = vigenere.encrypt(input);
    std::cout << "???????????: " << encryptedText << std::endl;

    // ??????????? ? ????? ??????????
    std::string decryptedText = vigenere.decrypt(encryptedText);
    std::cout << "????????????: " << decryptedText << std::endl;

    return 0;
}








/*
#include <iostream>
#include <string>

class VigenereMachine {
public:
    VigenereMachine(const std::string& key);
    std::string encrypt(const std::string& plaintext) const;
    std::string decrypt(const std::string& ciphertext) const;

private:
    std::string m_key;
};

VigenereMachine::VigenereMachine(const std::string& key) : m_key(key) {}

std::string VigenereMachine::encrypt(const std::string& plaintext) const {
    std::string ciphertext;
    size_t keyLength = m_key.length();
    size_t textLength = plaintext.length();

    for (size_t i = 0; i < textLength; ++i) {
        char currentChar = plaintext[i];
        char keyChar = m_key[i % keyLength];
        char encryptedChar;

        // ????????? ?????????? ????????
        encryptedChar = static_cast<char>((currentChar + keyChar) % 256);
        ciphertext.push_back(encryptedChar);
    }

    return ciphertext;
}

std::string VigenereMachine::decrypt(const std::string& ciphertext) const {
    std::string decryptedText;
    size_t keyLength = m_key.length();
    size_t textLength = ciphertext.length();

    for (size_t i = 0; i < textLength; ++i) {
        char currentChar = ciphertext[i];
        char keyChar = m_key[i % keyLength];
        char decryptedChar;

        // ????????? ??????????? ????????
        decryptedChar = static_cast<char>((currentChar - keyChar + 256) % 256);
        decryptedText.push_back(decryptedChar);
    }

    return decryptedText;
}

int main() {
    std::string key = "0"; // ???????? ?? ??? ????
    VigenereMachine vigenere(key);

    // ????????? ????? ?? ????????????
    std::string input;
    std::cout << "??????? ?????: ";
    std::getline(std::cin, input);

    // ?????????? ? ????? ??????????
    std::string encryptedText = vigenere.encrypt(input);
    std::cout << "???????????: " << encryptedText << std::endl;

    // ??????????? ? ????? ??????????
    std::string decryptedText = vigenere.decrypt(encryptedText);
    std::cout << "????????????: " << decryptedText << std::endl;

    return 0;
}
*/